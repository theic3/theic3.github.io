<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>theice</title><subtitle>++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>>+++++++++++++++++++.---.--------------.</subtitle> <updated>2021-07-14T22:24:58-04:00</updated> <author> <name>Jimmy Nguyen</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Jimmy Nguyen </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>simultaneity</title><link href="/posts/simultaneity/" rel="alternate" type="text/html" title="simultaneity" /><published>2021-07-11T00:00:00-04:00</published> <updated>2021-07-11T00:00:00-04:00</updated> <id>/posts/simultaneity/</id> <content src="/posts/simultaneity/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: Upon initial inspection we see that all mitigations are enabled besides stack canary (Full RELRO, PIE, NX) Looking at the code we can see that there are multiple scanf() calls as well as a leak from calling malloc() with a user specified size Now this is looking like a write what where primitive, with full relro, meaning we can’t overwrite GOT entries and have to look deeper I w... </summary> </entry> <entry><title>system drop</title><link href="/posts/system_drop/" rel="alternate" type="text/html" title="system drop" /><published>2021-04-23T00:00:00-04:00</published> <updated>2021-04-23T00:00:00-04:00</updated> <id>/posts/system_drop/</id> <content src="/posts/system_drop/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: Binary only comes with NX enabled as mitigation read(0, buffer, 0x100) for buffer overflow, except we are limited on gadgets We can use mov eax, 0x1 in main as part of our ROP chain, this was originally intended for the program to return a status code of 1 Originally this challenge gave me srop vibes. I tried a few srop payloads and used alarm() to set eax to 0xf to trigger the ... </summary> </entry> <entry><title>save the environment</title><link href="/posts/savetheenvironment/" rel="alternate" type="text/html" title="save the environment" /><published>2021-04-23T00:00:00-04:00</published> <updated>2021-04-23T00:00:00-04:00</updated> <id>/posts/savetheenvironment/</id> <content src="/posts/savetheenvironment/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: Binary comes with all mitigations besides PIE This program asks you if you want to plant or recycle When you select recycle, you are asked if you’ve recycled before, if not, then a global variable called rec_count is incremented. After recycling 5 times, the program gives you a printf leak After recycling 10 times, you are able to enter an address of your own to leak using put... </summary> </entry> <entry><title>minefield</title><link href="/posts/minefield/" rel="alternate" type="text/html" title="minefield" /><published>2021-04-23T00:00:00-04:00</published> <updated>2021-04-23T00:00:00-04:00</updated> <id>/posts/minefield/</id> <content src="/posts/minefield/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: This is a short writeup just to note how fini works and how you can overwrite fini_array to execute functions when a program exits normally http://beefchunk.com/documentation/sys-programming/binary_formats/elf/elf_from_the_programmers_perspective/node3.html The program comes with canary and nx enabled, but the mission() function lets us overwrite a value at an address by using str... </summary> </entry> <entry><title>harvester</title><link href="/posts/harvester/" rel="alternate" type="text/html" title="harvester" /><published>2021-04-23T00:00:00-04:00</published> <updated>2021-04-23T00:00:00-04:00</updated> <id>/posts/harvester/</id> <content src="/posts/harvester/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: Binary comes with all mitigations and we are given libc There is a menu with options of: fight, stare, inventory, or run (exit) check_pies(num_pies) checks for num_pies &amp;lt;= 0x64 &amp;amp;&amp;amp; num_pies != 0xf Format string bug in fight() -&amp;gt; printf(&amp;amp;user_input) inventory() shows how many pies we have, it also allows us to drop pies, this will be used to bypass check_pie(nu... </summary> </entry> </feed>
